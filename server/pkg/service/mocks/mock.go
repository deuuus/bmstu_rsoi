// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	bmstu_rsoi_lab1 "github.com/deuuus/bmstu-rsoi"
	gomock "github.com/golang/mock/gomock"
)

// MockPerson is a mock of Person interface.
type MockPerson struct {
	ctrl     *gomock.Controller
	recorder *MockPersonMockRecorder
}

// MockPersonMockRecorder is the mock recorder for MockPerson.
type MockPersonMockRecorder struct {
	mock *MockPerson
}

// NewMockPerson creates a new mock instance.
func NewMockPerson(ctrl *gomock.Controller) *MockPerson {
	mock := &MockPerson{ctrl: ctrl}
	mock.recorder = &MockPersonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerson) EXPECT() *MockPersonMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPerson) CreatePerson(person bmstu_rsoi_lab1.Person) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPerson)(nil).CreatePerson), person)
}

// DeletePersonById mocks base method.
func (m *MockPerson) DeletePersonById(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePersonById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePersonById indicates an expected call of DeletePersonById.
func (mr *MockPersonMockRecorder) DeletePersonById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePersonById", reflect.TypeOf((*MockPerson)(nil).DeletePersonById), id)
}

// GetAllPersons mocks base method.
func (m *MockPerson) GetAllPersons() ([]bmstu_rsoi_lab1.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPersons")
	ret0, _ := ret[0].([]bmstu_rsoi_lab1.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPersons indicates an expected call of GetAllPersons.
func (mr *MockPersonMockRecorder) GetAllPersons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPersons", reflect.TypeOf((*MockPerson)(nil).GetAllPersons))
}

// GetPersonById mocks base method.
func (m *MockPerson) GetPersonById(id int) (bmstu_rsoi_lab1.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonById", id)
	ret0, _ := ret[0].(bmstu_rsoi_lab1.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonById indicates an expected call of GetPersonById.
func (mr *MockPersonMockRecorder) GetPersonById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonById", reflect.TypeOf((*MockPerson)(nil).GetPersonById), id)
}

// UpdatePerson mocks base method.
func (m *MockPerson) UpdatePerson(id int, input bmstu_rsoi_lab1.PersonUpdate) (bmstu_rsoi_lab1.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", id, input)
	ret0, _ := ret[0].(bmstu_rsoi_lab1.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonMockRecorder) UpdatePerson(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPerson)(nil).UpdatePerson), id, input)
}
